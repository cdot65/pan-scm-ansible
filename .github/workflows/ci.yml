name: Ansible Collection CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible ansible-lint yamllint
          pip install poetry
          poetry install
      - name: Build and install collection
        run: |
          mkdir -p collections/ansible_collections
          ansible-galaxy collection build pan_scm_ansible
          ansible-galaxy collection install *.tar.gz -p ./collections
      - name: Lint code
        run: |
          export ANSIBLE_COLLECTIONS_PATHS=$PWD/collections:$ANSIBLE_COLLECTIONS_PATHS
          ansible-lint
          yamllint .

  build-and-test:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        ansible-version: ['2.13', '2.14', '2.15', 'latest']
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ "${{ matrix.ansible-version }}" == "latest" ]; then
            pip install ansible
          else
            pip install ansible~=${{ matrix.ansible-version }}.0
          fi
          pip install poetry
          poetry install
      - name: Build collection
        run: ansible-galaxy collection build
      - name: Install collection
        run: ansible-galaxy collection install *.tar.gz -p ./collections
      - name: Run sanity tests
        run: |
          cd ./collections/ansible_collections/cdot65/scm
          ansible-test sanity --docker -v
      - name: Run unit tests
        run: |
          cd ./collections/ansible_collections/cdot65/scm
          ansible-test units --docker -v
  
  integration-tests:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ansible
          pip install poetry
          poetry install
      - name: Build collection
        run: ansible-galaxy collection build
      - name: Install collection
        run: ansible-galaxy collection install *.tar.gz -p ./collections
      - name: Run integration tests
        run: |
          cd ./collections/ansible_collections/cdot65/scm
          ansible-test integration --docker -v
        env:
          PAN_SCM_USERNAME: ${{ secrets.PAN_SCM_USERNAME }}
          PAN_SCM_PASSWORD: ${{ secrets.PAN_SCM_PASSWORD }}
          PAN_SCM_TENANT: ${{ secrets.PAN_SCM_TENANT }}

  documentation:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mkdocs-material mkdocstrings mkdocs-termynal mkdocs-autorefs
      - name: Build documentation
        run: mkdocs build
      - name: Deploy documentation
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
