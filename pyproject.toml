[tool.poetry]
name = "pan-scm-ansible"
version = "0.2.0"
description = "Ansible Collection for Palo Alto Networks Strata Cloud Manager"
authors = ["Calvin Remsburg <calvin@cdot.io>"]
license = "Apache 2.0"
readme = "README.md"
keywords = ["paloaltonetworks", "stratacloudmanager", "scm", "ansible"]
homepage = "https://github.com/cdot65/pan-scm-ansible"
repository = "https://github.com/cdot65/pan-scm-ansible"
documentation = "https://cdot65.github.io/pan-scm-ansible/"

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
ansible-core = "^2.18.0"
pan-scm-sdk = ">=0.3.22"
ansible = "^11.3.0"

[tool.poetry.group.dev.dependencies]
flake8 = "^7.1.1"
mkdocs = "^1.6.1"
mkdocs-material = "^9.5.39"
mkdocstrings = { extras = ["python"], version = "^0.29.0" }
mkdocs-autorefs = "^1.4.1"
termynal = "^0.12.1"
python-dotenv = "^1.0.1"
pytest-dotenv = "^0.5.2"
rich = "^13.9.4"
ruff = "^0.9.10"
ansible-lint = "^25.1.3"
isort = "^6.0.1"
ipython = "^9.0.2"

[tool.ruff]
line-length = 100
target-version = "py311"
extend-exclude = ["collections/ansible_collections"]

[tool.ruff.lint]
select = ["E", "F"]
# Specifically disable import-related errors for scm
ignore = ["E501", "F401", "E402"]
per-file-ignores = { "**/*.py" = ["F821"] }  # Undefined name (for 'scm')

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.isort]
profile = "black"
line_length = 100
skip = ["collections/ansible_collections"]
known_third_party = ["scm"]  # Tell isort that scm is a third-party module

[tool.pyright]
include = ["pan_scm_ansible"]
extraPaths = [".", "./collections"]
reportMissingModuleSource = "none"
# Ignore specific modules for Pyright
typeCheckingMode = "basic"
useLibraryCodeForTypes = true
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"
reportUnknownArgumentType = "none"
reportMissingTypeStubs = false

# Explicitly tell Pyright to ignore 'scm'
stubPath = ".pycharm_helpers"  # Look for stubs in this directory
reportMissingImports = false  # Disable missing import errors globally

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
