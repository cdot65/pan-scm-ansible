# -*- coding: utf-8 -*-
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# This code is part of Ansible, but is an independent component.
# This particular file snippet, and this file snippet only, is Apache2.0 licensed.
# Modules you write using this snippet, which is embedded dynamically by Ansible
# still belong to the author of the module, and may assign their own license
# to the complete work.
#
# Copyright (c) 2024 Calvin Remsburg (@cdot65)
# All rights reserved.

from typing import Any, Dict


class VulnerabilityProtectionProfileSpec:
    """
    API specifications for SCM Ansible modules.

    This class provides standardized specifications for SCM (Strata Cloud Manager)
    related Ansible modules, ensuring consistent parameter definitions and validation
    across the module collection.
    """

    @staticmethod
    def spec() -> Dict[str, Any]:
        """
        Returns Ansible module spec for vulnerability protection profile objects.

        This method defines the structure and requirements for vulnerability protection profile
        related parameters in SCM modules, aligning with the Pydantic models in the SCM SDK.

        Returns:
            Dict[str, Any]: A dictionary containing the module specification with
                         parameter definitions and their requirements.
        """
        return dict(
            name=dict(
                type="str",
                required=True,
                description="The name of the vulnerability protection profile (max 63 chars, must match pattern: ^[a-zA-Z0-9][a-zA-Z0-9_\\-. ]*$).",
            ),
            description=dict(
                type="str",
                required=False,
                description="Description of the vulnerability protection profile (max 1023 chars).",
            ),
            rules=dict(
                type="list",
                elements="dict",
                required=True,
                description="List of vulnerability protection rules to apply. At least one rule is required.",
                options=dict(
                    name=dict(
                        type="str",
                        required=True,
                        description="Name of the rule.",
                    ),
                    severity=dict(
                        type="list",
                        elements="str",
                        required=True,
                        choices=[
                            "critical",
                            "high",
                            "medium",
                            "low",
                            "informational",
                            "any",
                        ],
                        description="List of severity levels this rule applies to.",
                    ),
                    cve=dict(
                        type="list",
                        elements="str",
                        required=False,
                        description="List of CVE IDs that this rule applies to.",
                    ),
                    category=dict(
                        type="str",
                        required=True,
                        choices=[
                            "any",
                            "buffer-overflow",
                            "code-execution",
                            "format-string",
                            "remote-code-execution",
                            "authentication-bypass",
                            "command-injection",
                            "data-flow",
                            "privilege-escalation",
                            "sql-injection",
                            "vulnerabilities",
                            "memory-corruption",
                            "integer-overflow",
                            "directory-traversal",
                            "memory-overflow",
                            "information-disclosure",
                            "server-applications",
                            "xml-external-entity",
                            "browser-application",
                            "local-guest-virtual-machine-escape",
                            "xml-document-type-definition",
                            "cross-site-scripting",
                            "use-after-free",
                            "heap-overflow",
                            "cross-site-request-forgery",
                            "resource-exhaustion",
                            "integer-underflow",
                            "race-condition",
                            "stack-overflow",
                            "information-theft",
                            "command-shell",
                            "buffer-underflow",
                            "shellshock",
                            "content-spoofing",
                            "client-applications",
                            "denial-of-service",
                            "log-injection",
                            "clickjacking",
                            "path-traversal",
                            "request-smuggling",
                            "reply-injection",
                            "fuzzing",
                            "web-applications",
                            "unauthorized-access",
                            "other",
                        ],
                        description="Category of vulnerability that this rule applies to.",
                    ),
                    host=dict(
                        type="str",
                        required=True,
                        choices=["any", "client", "server"],
                        description="Type of host (client or server) that this rule applies to.",
                    ),
                    vendor=dict(
                        type="list",
                        elements="str",
                        required=False,
                        description="List of vendor names to match in this rule.",
                    ),
                    packet_capture=dict(
                        type="str",
                        required=False,
                        choices=["disable", "single-packet", "extended-capture"],
                        description="Type of packet capture to perform when rule matches.",
                    ),
                    action=dict(
                        type="raw",
                        required=True,
                        description="Action to take when the rule matches. Can be a string (e.g. 'alert', 'reset-both') or a dictionary (e.g. {'alert': {}} or {'reset_both': {}}).",
                    ),
                    block_ip_track_by=dict(
                        type="str",
                        required=False,
                        choices=["source", "destination", "source-and-destination"],
                        description="Tracking method for block-ip action.",
                    ),
                    block_ip_duration=dict(
                        type="int",
                        required=False,
                        description="Duration in seconds for block-ip action.",
                    ),
                ),
            ),
            threat_exception=dict(
                type="list",
                elements="dict",
                required=False,
                description="List of exceptions to the vulnerability rules.",
                options=dict(
                    name=dict(
                        type="str",
                        required=True,
                        description="Name of the threat exception.",
                    ),
                    packet_capture=dict(
                        type="str",
                        required=True,
                        choices=["disable", "single-packet", "extended-capture"],
                        description="Type of packet capture to perform for this exception.",
                    ),
                    exempt_ip=dict(
                        type="list",
                        elements="dict",
                        required=False,
                        description="List of IP addresses to exempt from this rule.",
                        options=dict(
                            name=dict(
                                type="str",
                                required=True,
                                description="Exempt IP address or range.",
                            ),
                        ),
                    ),
                    notes=dict(
                        type="str",
                        required=False,
                        description="Additional notes for the threat exception.",
                    ),
                    action=dict(
                        type="raw",
                        required=True,
                        description="Action to take for excepted traffic. Can be a string (e.g. 'alert', 'reset-both') or a dictionary (e.g. {'alert': {}} or {'reset_both': {}}).",
                    ),
                    block_ip_track_by=dict(
                        type="str",
                        required=False,
                        choices=["source", "destination", "source-and-destination"],
                        description="Tracking method for block-ip action in exception.",
                    ),
                    block_ip_duration=dict(
                        type="int",
                        required=False,
                        description="Duration in seconds for block-ip action in exception.",
                    ),
                ),
            ),
            folder=dict(
                type="str",
                required=False,
                description="The folder in which the profile is defined (max 64 chars).",
            ),
            snippet=dict(
                type="str",
                required=False,
                description="The snippet in which the profile is defined (max 64 chars).",
            ),
            device=dict(
                type="str",
                required=False,
                description="The device in which the profile is defined (max 64 chars).",
            ),
            provider=dict(
                type="dict",
                required=True,
                description="Authentication credentials for connecting to SCM.",
                options=dict(
                    client_id=dict(
                        type="str",
                        required=True,
                        description="Client ID for authentication with SCM.",
                    ),
                    client_secret=dict(
                        type="str",
                        required=True,
                        no_log=True,
                        description="Client secret for authentication with SCM.",
                    ),
                    tsg_id=dict(
                        type="str",
                        required=True,
                        description="Tenant Service Group ID.",
                    ),
                    log_level=dict(
                        type="str",
                        required=False,
                        default="INFO",
                        description="Log level for the SDK (DEBUG, INFO, WARNING, ERROR, CRITICAL).",
                    ),
                ),
            ),
            state=dict(
                type="str",
                choices=["present", "absent"],
                required=True,
                description="Desired state of the vulnerability protection profile.",
            ),
        )
