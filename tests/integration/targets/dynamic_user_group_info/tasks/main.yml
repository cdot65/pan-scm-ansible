---
# Ansible integration test for dynamic_user_group_info module
# Usage: ansible-playbook -i inventory dynamic_user_group_info_integration_tests.yml

- name: Test Dynamic User Group Info module
  hosts: localhost
  gather_facts: no
  vars:
    test_folder: "Security"
    timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
    test_dug_name_1: "test_info_high_risk_users_{{ timestamp }}"
    test_dug_name_2: "test_info_risky_contractors_{{ timestamp }}"
    test_dug_name_3: "test_info_external_users_{{ timestamp }}"
    test_filter_1: "tag.criticality.high"
    test_filter_2: "tag.user_type.contractor and (tag.criticality.high or tag.risk_score.gt.80)"
    test_filter_3: "tag.user_type.external"
    test_description_1: "Users with high risk classification"
    test_description_2: "High risk contractors"
    test_description_3: "External users with limited access"
    test_tags_1: 
      - "dev-ansible"
      - "dev-automation"
      - "dev-test"
      - "high-risk"
    test_tags_2:
      - "dev-ansible"
      - "dev-automation"
      - "dev-cicd"
      - "contractor"
    test_tags_3:
      - "dev-ansible"
      - "dev-test"
      - "external"

  tasks:
    # ==========================================
    # INITIAL SETUP AND CLEANUP
    # ==========================================
    - name: Print test information
      ansible.builtin.debug:
        msg: "Testing Dynamic User Group Info module with timestamp: {{ timestamp }}"
      tags:
        - dev-test

    - name: "# CLEANUP - Ensure any existing test objects are removed"
      cdot65.scm.dynamic_user_group:
        provider: "{{ provider }}"
        name: "{{ item }}"
        folder: "{{ test_folder }}"
        state: "absent"
      with_items:
        - "{{ test_dug_name_1 }}"
        - "{{ test_dug_name_2 }}"
        - "{{ test_dug_name_3 }}"
      ignore_errors: yes
      tags:
        - dev-cleanup
        - dev-ansible

    # ==========================================
    # CREATE TEST OBJECTS
    # ==========================================
    - name: "# SETUP - Create test dynamic user groups for info testing"
      cdot65.scm.dynamic_user_group:
        provider: "{{ provider }}"
        name: "{{ item.name }}"
        filter: "{{ item.filter }}"
        description: "{{ item.description }}"
        folder: "{{ test_folder }}"
        tag: "{{ item.tags }}"
        state: "present"
      loop:
        - { name: "{{ test_dug_name_1 }}", filter: "{{ test_filter_1 }}", description: "{{ test_description_1 }}", tags: "{{ test_tags_1 }}" }
        - { name: "{{ test_dug_name_2 }}", filter: "{{ test_filter_2 }}", description: "{{ test_description_2 }}", tags: "{{ test_tags_2 }}" }
        - { name: "{{ test_dug_name_3 }}", filter: "{{ test_filter_3 }}", description: "{{ test_description_3 }}", tags: "{{ test_tags_3 }}" }
      register: create_results
      tags:
        - dev-ansible
        - dev-setup

    # ==========================================
    # READ OPERATIONS - SPECIFIC OBJECT
    # ==========================================
    - name: "# READ - Get information about a specific dynamic user group"
      cdot65.scm.dynamic_user_group_info:
        provider: "{{ provider }}"
        name: "{{ test_dug_name_1 }}"
        folder: "{{ test_folder }}"
      register: get_info_result
      tags:
        - dev-ansible
        - dev-test

    - name: "# VERIFY - Verify get info operation succeeded"
      ansible.builtin.assert:
        that:
          - get_info_result.dynamic_user_group is defined
          - get_info_result.dynamic_user_group.name == test_dug_name_1
          - get_info_result.dynamic_user_group.filter == test_filter_1
          - get_info_result.dynamic_user_group.description == test_description_1
          - get_info_result.dynamic_user_group.folder == test_folder
          - get_info_result.dynamic_user_group.tag | length == test_tags_1 | length
          - "'high-risk' in get_info_result.dynamic_user_group.tag"
        fail_msg: "Failed to get info for specific dynamic user group"
        success_msg: "Successfully retrieved test dynamic user group info for: {{ test_dug_name_1 }}"
      tags:
        - dev-test

    # ==========================================
    # READ OPERATIONS - LIST ALL
    # ==========================================
    - name: "# READ - List all dynamic user group objects in a folder"
      cdot65.scm.dynamic_user_group_info:
        provider: "{{ provider }}"
        folder: "{{ test_folder }}"
      register: list_all_result
      tags:
        - dev-ansible
        - dev-test

    - name: "# VERIFY - Verify list all operation includes all created groups"
      ansible.builtin.assert:
        that:
          - list_all_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_1) | list | length == 1
          - list_all_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_2) | list | length == 1
          - list_all_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_3) | list | length == 1
        fail_msg: "Failed to list all dynamic user groups"
        success_msg: "Successfully listed all dynamic user groups including test objects"
      tags:
        - dev-test

    # ==========================================
    # READ OPERATIONS - TAG FILTERING
    # ==========================================
    - name: "# FILTER - List dynamic user groups with tag filtering (high-risk)"
      cdot65.scm.dynamic_user_group_info:
        provider: "{{ provider }}"
        folder: "{{ test_folder }}"
        tags: ["high-risk"]
      register: high_risk_tagged_result
      tags:
        - dev-ansible
        - dev-test

    - name: "# VERIFY - Verify high-risk tag filtering works correctly"
      ansible.builtin.assert:
        that:
          - high_risk_tagged_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_1) | list | length == 1
          - high_risk_tagged_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_2) | list | length == 0
          - high_risk_tagged_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_3) | list | length == 0
        fail_msg: "High-risk tag filtering did not work as expected"
        success_msg: "Successfully filtered dynamic user groups by high-risk tag"
      tags:
        - dev-test

    - name: "# FILTER - List dynamic user groups with tag filtering (contractor)"
      cdot65.scm.dynamic_user_group_info:
        provider: "{{ provider }}"
        folder: "{{ test_folder }}"
        tags: ["contractor"]
      register: contractor_tagged_result
      tags:
        - dev-ansible
        - dev-test

    - name: "# VERIFY - Verify contractor tag filtering works correctly"
      ansible.builtin.assert:
        that:
          - contractor_tagged_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_1) | list | length == 0
          - contractor_tagged_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_2) | list | length == 1
          - contractor_tagged_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_3) | list | length == 0
        fail_msg: "Contractor tag filtering did not work as expected"
        success_msg: "Successfully filtered dynamic user groups by contractor tag"
      tags:
        - dev-test

    # ==========================================
    # READ OPERATIONS - FILTER EXPRESSIONS
    # ==========================================
    - name: "# FILTER - List dynamic user groups with filter expression (criticality.high)"
      cdot65.scm.dynamic_user_group_info:
        provider: "{{ provider }}"
        folder: "{{ test_folder }}"
        filters: ["tag.criticality.high"]
      register: criticality_filter_result
      tags:
        - dev-ansible
        - dev-test

    - name: "# VERIFY - Verify criticality filter expression works correctly"
      ansible.builtin.assert:
        that:
          - criticality_filter_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_1) | list | length == 1
          - criticality_filter_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_2) | list | length == 1
          - criticality_filter_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_3) | list | length == 0
        fail_msg: "Criticality filter expression filtering did not work as expected"
        success_msg: "Successfully filtered dynamic user groups by criticality filter expression"
      tags:
        - dev-test

    - name: "# FILTER - List dynamic user groups with filter expression (external)"
      cdot65.scm.dynamic_user_group_info:
        provider: "{{ provider }}"
        folder: "{{ test_folder }}"
        filters: ["external"]
      register: external_filter_result
      tags:
        - dev-ansible
        - dev-test

    - name: "# VERIFY - Verify external filter expression works correctly"
      ansible.builtin.assert:
        that:
          - external_filter_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_1) | list | length == 0
          - external_filter_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_2) | list | length == 0
          - external_filter_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_3) | list | length == 1
        fail_msg: "External filter expression filtering did not work as expected"
        success_msg: "Successfully filtered dynamic user groups by external filter expression"
      tags:
        - dev-test

    # ==========================================
    # READ OPERATIONS - EXACT MATCH
    # ==========================================
    - name: "# FILTER - List dynamic user groups with exact_match"
      cdot65.scm.dynamic_user_group_info:
        provider: "{{ provider }}"
        folder: "{{ test_folder }}"
        exact_match: true
      register: exact_match_result
      tags:
        - dev-ansible
        - dev-test

    - name: "# VERIFY - Verify exact_match parameter works correctly"
      ansible.builtin.assert:
        that:
          - exact_match_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_1) | list | length == 1
          - exact_match_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_2) | list | length == 1
          - exact_match_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_3) | list | length == 1
        fail_msg: "Exact_match parameter did not work as expected"
        success_msg: "Successfully filtered dynamic user groups with exact_match parameter"
      tags:
        - dev-test

    # ==========================================
    # GATHER SUBSET TESTING
    # ==========================================
    - name: "# CONFIG - Get dynamic user group info with gather_subset=config"
      cdot65.scm.dynamic_user_group_info:
        provider: "{{ provider }}"
        name: "{{ test_dug_name_1 }}"
        folder: "{{ test_folder }}"
        gather_subset: ["config"]
      register: config_subset_result
      tags:
        - dev-ansible
        - dev-test

    - name: "# VERIFY - Verify config gather_subset returns expected data"
      ansible.builtin.assert:
        that:
          - config_subset_result.dynamic_user_group is defined
          - config_subset_result.dynamic_user_group.name == test_dug_name_1
          - config_subset_result.dynamic_user_group.filter == test_filter_1
        fail_msg: "Config gather_subset did not return expected data"
        success_msg: "Successfully retrieved dynamic user group info with config gather_subset"
      tags:
        - dev-test

    - name: "# ALL - Get dynamic user group info with gather_subset=all"
      cdot65.scm.dynamic_user_group_info:
        provider: "{{ provider }}"
        name: "{{ test_dug_name_1 }}"
        folder: "{{ test_folder }}"
        gather_subset: ["all"]
      register: all_subset_result
      tags:
        - dev-ansible
        - dev-test

    - name: "# VERIFY - Verify all gather_subset returns expected data"
      ansible.builtin.assert:
        that:
          - all_subset_result.dynamic_user_group is defined
          - all_subset_result.dynamic_user_group.name == test_dug_name_1
          - all_subset_result.dynamic_user_group.filter == test_filter_1
        fail_msg: "All gather_subset did not return expected data"
        success_msg: "Successfully retrieved dynamic user group info with all gather_subset"
      tags:
        - dev-test

    # ==========================================
    # FINAL CLEANUP
    # ==========================================
    - name: "# CLEANUP - Delete all test dynamic user groups"
      cdot65.scm.dynamic_user_group:
        provider: "{{ provider }}"
        name: "{{ item }}"
        folder: "{{ test_folder }}"
        state: "absent"
      with_items:
        - "{{ test_dug_name_1 }}"
        - "{{ test_dug_name_2 }}"
        - "{{ test_dug_name_3 }}"
      register: cleanup_result
      tags:
        - dev-ansible
        - dev-cleanup

    - name: "# VERIFY - Confirm all test dynamic user groups are deleted"
      cdot65.scm.dynamic_user_group_info:
        provider: "{{ provider }}"
        folder: "{{ test_folder }}"
      register: final_verification
      tags:
        - dev-ansible
        - dev-test

    - name: "# VERIFY - Verify all test dynamic user groups are deleted"
      ansible.builtin.assert:
        that:
          - final_verification.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_1) | list | length == 0
          - final_verification.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_2) | list | length == 0
          - final_verification.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_3) | list | length == 0
        fail_msg: "Failed to verify cleanup of test dynamic user groups"
        success_msg: "Successfully confirmed all test dynamic user groups were deleted"
      tags:
        - dev-test
