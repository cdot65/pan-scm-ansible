---
# Ansible integration test for dynamic_user_group module
# Usage: ansible-playbook -i inventory dynamic_user_group_integration_tests.yml

- name: Test Dynamic User Group module
  hosts: localhost
  gather_facts: no
  vars:
    test_folder: "Security"
    timestamp: "{{ lookup('pipe', 'date +%Y%m%d%H%M%S') }}"
    test_dug_name_1: "test_high_risk_users_{{ timestamp }}"
    test_dug_name_2: "test_risky_contractors_{{ timestamp }}"
    test_filter_1: "tag.criticality.high"
    test_filter_2: "tag.user_type.contractor and (tag.criticality.high or tag.risk_score.gt.80)"
    test_description_1: "Users with high risk classification"
    test_description_2: "High risk contractors"
    test_tags_1: 
      - "dev-ansible"
      - "dev-automation"
      - "dev-test"
    test_tags_2:
      - "dev-ansible"
      - "dev-automation"
      - "dev-cicd"
    updated_filter_1: "tag.criticality.high or tag.risk_score.gt.90"
    updated_description_1: "Updated user group for high risk classification"
    updated_tags_1:
      - "dev-ansible"
      - "dev-automation"
      - "dev-test"
      - "dev-highpriority"

  tasks:
    # ==========================================
    # INITIAL SETUP AND CLEANUP
    # ==========================================
    - name: Print test information
      ansible.builtin.debug:
        msg: "Testing Dynamic User Group CRUD operations with timestamp: {{ timestamp }}"
      tags:
        - dev-test

    - name: Ensure any existing test objects are removed
      cdot65.scm.dynamic_user_group:
        provider: "{{ provider }}"
        name: "{{ item }}"
        folder: "{{ test_folder }}"
        state: "absent"
      with_items:
        - "{{ test_dug_name_1 }}"
        - "{{ test_dug_name_2 }}"
      ignore_errors: yes
      tags:
        - dev-cleanup
        - dev-ansible

    # ==========================================
    # CREATE OPERATIONS
    # ==========================================
    - name: "# CREATE - Create a dynamic user group with a simple filter"
      cdot65.scm.dynamic_user_group:
        provider: "{{ provider }}"
        name: "{{ test_dug_name_1 }}"
        filter: "{{ test_filter_1 }}"
        description: "{{ test_description_1 }}"
        folder: "{{ test_folder }}"
        tag: "{{ test_tags_1 }}"
        state: "present"
      register: create_result_1
      tags:
        - dev-ansible
        - dev-test

    - name: Verify create operation succeeded
      ansible.builtin.assert:
        that:
          - create_result_1 is changed
          - create_result_1.dynamic_user_group is defined
          - create_result_1.dynamic_user_group.name == test_dug_name_1
          - create_result_1.dynamic_user_group.filter == test_filter_1
          - create_result_1.dynamic_user_group.description == test_description_1
          - create_result_1.dynamic_user_group.folder == test_folder
          - create_result_1.dynamic_user_group.tag | length == test_tags_1 | length
        fail_msg: "Failed to create test dynamic user group 1"
        success_msg: "Successfully created test dynamic user group: {{ test_dug_name_1 }}"
      tags:
        - dev-test

    - name: "# CREATE - Create a dynamic user group with a complex filter"
      cdot65.scm.dynamic_user_group:
        provider: "{{ provider }}"
        name: "{{ test_dug_name_2 }}"
        filter: "{{ test_filter_2 }}"
        description: "{{ test_description_2 }}"
        folder: "{{ test_folder }}"
        tag: "{{ test_tags_2 }}"
        state: "present"
      register: create_result_2
      tags:
        - dev-ansible
        - dev-test

    - name: Verify create operation succeeded for complex filter
      ansible.builtin.assert:
        that:
          - create_result_2 is changed
          - create_result_2.dynamic_user_group is defined
          - create_result_2.dynamic_user_group.name == test_dug_name_2
          - create_result_2.dynamic_user_group.filter == test_filter_2
          - create_result_2.dynamic_user_group.description == test_description_2
          - create_result_2.dynamic_user_group.folder == test_folder
          - create_result_2.dynamic_user_group.tag | length == test_tags_2 | length
        fail_msg: "Failed to create test dynamic user group 2"
        success_msg: "Successfully created test dynamic user group: {{ test_dug_name_2 }}"
      tags:
        - dev-test

    # ==========================================
    # READ OPERATIONS
    # ==========================================
    - name: "# READ - Get information about a specific dynamic user group"
      cdot65.scm.dynamic_user_group_info:
        provider: "{{ provider }}"
        name: "{{ test_dug_name_1 }}"
        folder: "{{ test_folder }}"
      register: get_info_result
      tags:
        - dev-ansible
        - dev-test

    - name: Verify get info operation succeeded
      ansible.builtin.assert:
        that:
          - get_info_result.dynamic_user_group is defined
          - get_info_result.dynamic_user_group.name == test_dug_name_1
          - get_info_result.dynamic_user_group.filter == test_filter_1
          - get_info_result.dynamic_user_group.description == test_description_1
          - get_info_result.dynamic_user_group.folder == test_folder
          - get_info_result.dynamic_user_group.tag | length == test_tags_1 | length
        fail_msg: "Failed to get info for test dynamic user group 1"
        success_msg: "Successfully retrieved test dynamic user group info for: {{ test_dug_name_1 }}"
      tags:
        - dev-test

    - name: "# READ - List all dynamic user group objects in a folder"
      cdot65.scm.dynamic_user_group_info:
        provider: "{{ provider }}"
        folder: "{{ test_folder }}"
      register: list_all_result
      tags:
        - dev-ansible
        - dev-test

    - name: Verify list all operation includes both created groups
      ansible.builtin.assert:
        that:
          - list_all_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_1) | list | length == 1
          - list_all_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_2) | list | length == 1
        fail_msg: "Failed to list all dynamic user groups"
        success_msg: "Successfully listed all dynamic user groups including test objects"
      tags:
        - dev-test

    - name: "# READ - List dynamic user groups with tag filtering"
      cdot65.scm.dynamic_user_group_info:
        provider: "{{ provider }}"
        folder: "{{ test_folder }}"
        tags: ["dev-cicd"]
      register: list_tagged_result
      tags:
        - dev-ansible
        - dev-test

    - name: Verify tag filtering works correctly
      ansible.builtin.assert:
        that:
          - list_tagged_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_2) | list | length == 1
          - list_tagged_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_1) | list | length == 0
        fail_msg: "Tag filtering did not work as expected"
        success_msg: "Successfully filtered dynamic user groups by tag"
      tags:
        - dev-test

    # ==========================================
    # IDEMPOTENCY TEST
    # ==========================================
    - name: "# IDEMPOTENCY - Verify create idempotency (create again with same parameters)"
      cdot65.scm.dynamic_user_group:
        provider: "{{ provider }}"
        name: "{{ test_dug_name_1 }}"
        filter: "{{ test_filter_1 }}"
        description: "{{ test_description_1 }}"
        folder: "{{ test_folder }}"
        tag: "{{ test_tags_1 }}"
        state: "present"
      register: idempotence_result
      tags:
        - dev-ansible
        - dev-test

    - name: Verify idempotency works correctly
      ansible.builtin.assert:
        that:
          - idempotence_result is not changed
          - idempotence_result.dynamic_user_group is defined
          - idempotence_result.dynamic_user_group.name == test_dug_name_1
        fail_msg: "Idempotency check failed - create operation changed something when it shouldn't have"
        success_msg: "Successfully verified idempotency for create operation"
      tags:
        - dev-test

    # ==========================================
    # UPDATE OPERATIONS
    # ==========================================
    - name: "# UPDATE - Update an existing dynamic user group's filter and tags"
      cdot65.scm.dynamic_user_group:
        provider: "{{ provider }}"
        name: "{{ test_dug_name_1 }}"
        filter: "{{ updated_filter_1 }}"
        description: "{{ updated_description_1 }}"
        folder: "{{ test_folder }}"
        tag: "{{ updated_tags_1 }}"
        state: "present"
      register: update_result
      tags:
        - dev-ansible
        - dev-test

    - name: Verify update operation succeeded
      ansible.builtin.assert:
        that:
          - update_result is changed
          - update_result.dynamic_user_group is defined
          - update_result.dynamic_user_group.name == test_dug_name_1
          - update_result.dynamic_user_group.filter == updated_filter_1
          - update_result.dynamic_user_group.description == updated_description_1
          - update_result.dynamic_user_group.folder == test_folder
          - update_result.dynamic_user_group.tag | length == updated_tags_1 | length
          - "'dev-highpriority' in update_result.dynamic_user_group.tag"
        fail_msg: "Failed to update test dynamic user group 1"
        success_msg: "Successfully updated test dynamic user group: {{ test_dug_name_1 }}"
      tags:
        - dev-test

    # ==========================================
    # DELETE OPERATIONS
    # ==========================================
    - name: "# DELETE - Delete dynamic user groups"
      cdot65.scm.dynamic_user_group:
        provider: "{{ provider }}"
        name: "{{ item }}"
        folder: "{{ test_folder }}"
        state: "absent"
      register: delete_result
      with_items:
        - "{{ test_dug_name_1 }}"
        - "{{ test_dug_name_2 }}"
      tags:
        - dev-ansible
        - dev-cleanup
        - dev-test

    - name: Verify delete operation succeeded
      ansible.builtin.assert:
        that:
          - delete_result.results[0].changed == true
          - delete_result.results[1].changed == true
        fail_msg: "Failed to delete test dynamic user groups"
        success_msg: "Successfully deleted test dynamic user groups"
      tags:
        - dev-test

    # ==========================================
    # VERIFY DELETION
    # ==========================================
    - name: "# VERIFY - Verify dynamic user groups are deleted"
      cdot65.scm.dynamic_user_group_info:
        provider: "{{ provider }}"
        folder: "{{ test_folder }}"
      register: final_list_result
      tags:
        - dev-ansible
        - dev-test

    - name: Verify dynamic user groups are not in the final list
      ansible.builtin.assert:
        that:
          - final_list_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_1) | list | length == 0
          - final_list_result.dynamic_user_groups | selectattr('name', 'equalto', test_dug_name_2) | list | length == 0
        fail_msg: "Failed to verify deletion of test dynamic user groups"
        success_msg: "Successfully verified all test dynamic user groups were deleted"
      tags:
        - dev-test
